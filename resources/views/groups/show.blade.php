@if($isAuthenticated)
<x-app-layout>
@else
<x-guest-layout>
@endif
    @if($isAuthenticated)
    <x-slot name="header">
        <div class="flex items-center justify-between">
            <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">
                {{ $group->name }}
            </h2>
            <span class="px-3 py-1 text-sm font-medium bg-{{ $group->status === 'open' ? 'green' : 'blue' }}-100 text-{{ $group->status === 'open' ? 'green' : 'blue' }}-800 dark:bg-{{ $group->status === 'open' ? 'green' : 'blue' }}-900 dark:text-{{ $group->status === 'open' ? 'green' : 'blue' }}-200 rounded-full">
                {{ ucfirst($group->status) }}
            </span>
        </div>
    </x-slot>
    @else

     <div class="mb-6 text-center">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2">{{ $group->name }}</h1>
        <span class="inline-block px-3 py-1 text-sm font-medium bg-{{ $group->status === 'open' ? 'green' : 'blue' }}-100 text-{{ $group->status === 'open' ? 'green' : 'blue' }}-800 dark:bg-{{ $group->status === 'open' ? 'green' : 'blue' }}-900 dark:text-{{ $group->status === 'open' ? 'green' : 'blue' }}-200 rounded-full">
            {{ ucfirst($group->status) }}
        </span>
    </div>
    @endif

     @if($isAuthenticated && $canJoin)
    <x-confirmation-modal
        name="join-group-{{ $group->id }}"
        :title="__('general.confirm_join_group')"
        :message="__('general.join_group_warning', ['amount' => number_format($group->contribution_amount, 2), 'frequency' => $group->frequency])"
        :confirm-text="__('general.join_this_group')"
        :cancel-text="__('general.cancel')"
        confirm-class="bg-green-600 hover:bg-green-700"
        x-on:confirm-action="if ($event.detail === 'join-group-{{ $group->id }}') { document.getElementById('join-form-{{ $group->id }}').submit(); }" />
    @endif

     @if($isAuthenticated && $userIsMember && $group->created_by !== auth()->user()->uuid && $group->current_members > 1)
    <x-confirmation-modal
        name="leave-group-{{ $group->id }}"
        :title="__('general.confirm_leave_group')"
        :message="__('general.leave_group_warning')"
        :confirm-text="__('general.leave_group')"
        :cancel-text="__('general.cancel')"
        confirm-class="bg-red-600 hover:bg-red-700"
        x-on:confirm-action="if ($event.detail === 'leave-group-{{ $group->id }}') { document.getElementById('leave-form-{{ $group->id }}').submit(); }" />
    @endif

   <div class="{{ $isAuthenticated ? 'py-12' : 'py-6' }}">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 space-y-6">
            <!-- Group Information -->
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6">
                    <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4 gap-4">
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">{{ __('general.group_information') }}</h3>
                        
                        @if($isAuthenticated && $group->created_by === Auth::user()->uuid && $group->canStartContribution())
                        @if($group->turn_format === 'random')
                        <!-- Spin Wheel Section for Random Turn Assignment -->
                        <div class="mb-6 p-6 bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 border border-purple-200 dark:border-purple-800 rounded-lg">
                            @if(!$group->isContributionStarted())
                            <h4 class="text-xl font-bold text-purple-900 dark:text-purple-100 mb-4 text-center">ðŸŽ¯ {{ __('general.spin_for_turns') }}</h4>
                            <p class="text-sm text-purple-700 dark:text-purple-300 mb-6 text-center">{{ __('general.spin_wheel_description') }}</p>
                            
                            <!-- Wheel Container -->
                            <div class="flex flex-col items-center space-y-6">
                                <div class="relative">
                                    <!-- Wheel -->
                                    <div id="spin-wheel" class="w-64 h-64 sm:w-80 sm:h-80 rounded-full border-8 border-gray-300 dark:border-gray-600 relative overflow-hidden shadow-2xl transition-transform duration-4000 ease-out">
                                        <!-- Wheel segments will be generated by JavaScript -->
                                    </div>
                                    
                                    <!-- Pointer -->
                                    <div class="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-2 z-10">
                                        <div class="w-0 h-0 border-l-4 border-r-4 border-b-8 border-l-transparent border-r-transparent border-b-red-600"></div>
                                    </div>
                                </div>
                                
                                <!-- Spin Button -->
                                <button id="spin-btn" type="button"
                                    class="px-8 py-4 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-bold rounded-full shadow-lg transform hover:scale-105 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none">
                                    ðŸŽ² {{ __('general.spin_wheel') }}
                                </button>
                                
                                <!-- Result Display -->
                                <div id="spin-result" class="hidden mt-6 p-4 bg-green-100 dark:bg-green-900/30 border border-green-300 dark:border-green-700 rounded-lg text-center">
                                    <h5 class="text-lg font-bold text-green-800 dark:text-green-200 mb-2">ðŸŽ‰ {{ __('general.spin_result') }}</h5>
                                    <p id="result-text" class="text-green-700 dark:text-green-300"></p>
                                    
                                    <!-- Start Contribution Button (appears after spin) -->
                                    <form method="POST" action="{{ route('groups.start-contribution', $group->uuid) }}" class="mt-4">
                                        @csrf
                                        <button type="submit"
                                            class="px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-bold rounded-lg transition duration-200"
                                            onclick="return confirm('{{ __('general.confirm_start_contribution') }}')">
                                            {{ __('general.start_contribution') }}
                                        </button>
                                    </form>
                                </div>
                            </div>
                            @else
                              @php
                                $currentUserMember = $group->members()->where('user_uuid', Auth::user()->uuid)->first();
                            @endphp
                            
                            @if($currentUserMember && !$currentUserMember->is_rolled)
                            <h4 class="text-xl font-bold text-purple-900 dark:text-purple-100 mb-4 text-center">ðŸŽ² {{ __('general.discover_your_turn') }}</h4>
                            <p class="text-sm text-purple-700 dark:text-purple-300 mb-6 text-center">{{ __('general.spin_to_discover_position') }}</p>
                            
                            <!-- Member Wheel Container -->
                            <div class="flex flex-col items-center space-y-6">
                                <div class="relative">
                                    <!-- Wheel -->
                                    <div id="member-spin-wheel" class="w-64 h-64 sm:w-80 sm:h-80 rounded-full border-8 border-gray-300 dark:border-gray-600 relative overflow-hidden shadow-2xl transition-transform duration-4000 ease-out">
                                        <!-- Wheel segments will be generated by JavaScript -->
                                    </div>
                                    
                                    <!-- Pointer -->
                                    <div class="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-2 z-10">
                                        <div class="w-0 h-0 border-l-4 border-r-4 border-b-8 border-l-transparent border-r-transparent border-b-red-600"></div>
                                    </div>
                                </div>
                                
                                <!-- Member Spin Button -->
                                <button id="member-spin-btn" type="button"
                                    class="px-8 py-4 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-bold rounded-full shadow-lg transform hover:scale-105 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none">
                                    ðŸŽ² {{ __('general.discover_my_position') }}
                                </button>
                                
                                <!-- Member Result Display -->
                                <div id="member-spin-result" class="hidden mt-6 p-4 bg-green-100 dark:bg-green-900/30 border border-green-300 dark:border-green-700 rounded-lg text-center">
                                    <h5 class="text-lg font-bold text-green-800 dark:text-green-200 mb-2">ðŸŽ‰ {{ __('general.your_position') }}</h5>
                                    <p id="member-result-text" class="text-green-700 dark:text-green-300"></p>
                                </div>
                            </div>
                            @elseif($currentUserMember && $currentUserMember->is_rolled)
                            <div class="text-center p-6 bg-green-100 dark:bg-green-900/30 border border-green-300 dark:border-green-700 rounded-lg">
                                <h4 class="text-lg font-bold text-green-800 dark:text-green-200 mb-2">âœ… {{ __('general.position_revealed') }}</h4>
                                <p class="text-green-700 dark:text-green-300">{{ __('general.your_turn_position', ['position' => $currentUserMember->payout_position]) }}</p>
                            </div>
                            @endif
                            @endif
                        </div>
                        @else
                        <form method="POST" action="{{ route('groups.start-contribution', $group->uuid) }}" class="inline">
                            @csrf
                            <button type="submit"
                                class="w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition duration-200"
                                onclick="return confirm('{{ __('general.confirm_start_contribution') }}')">
                                {{ __('general.start_contribution') }}
                            </button>
                        </form>
                        @endif
                        @endif
                    </div>

                    @if($isAuthenticated && $group->created_by === Auth::user()->uuid && $group->canStartContribution() && $group->turn_format === 'manual')
                    <!-- Manual Position Assignment Section -->
                    <div class="mb-6 p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
                        <h4 class="text-lg font-semibold text-yellow-900 dark:text-yellow-100 mb-3">{{ __('general.position_assignment') }}</h4>
                        <p class="text-sm text-yellow-700 dark:text-yellow-300 mb-4">{{ __('general.drag_to_reorder') }}</p>

                        <div id="member-positions" class="space-y-2">
                            @foreach($group->members()->orderBy('payout_position')->get() as $member)
                            <div class="flex items-center justify-between p-3 bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg cursor-move"
                                data-member-uuid="{{ $member->user_uuid }}" data-position="{{ $member->payout_position ?? 0 }}">
                                <div class="flex items-center space-x-3 flex-1 min-w-0">
                                    <div class="w-8 h-8 bg-gray-200 dark:bg-gray-600 rounded-full flex items-center justify-center text-sm font-semibold flex-shrink-0">
                                        {{ $member->payout_position ?? '?' }}
                                    </div>
                                    <div class="min-w-0 flex-1">
                                        <div class="font-medium text-gray-900 dark:text-gray-100 truncate">{{ $member->user->name }}</div>
                                        <div class="text-sm text-gray-500 dark:text-gray-400 truncate">{{ __('general.position_number', ['position' => $member->payout_position ?? 'Unassigned']) }}</div>
                                    </div>
                                </div>
                                <div class="text-gray-400 flex-shrink-0 ml-2">
                                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                        <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"></path>
                                    </svg>
                                </div>
                            </div>
                            @endforeach
                        </div>

                        <button type="button" id="save-positions"
                            class="mt-4 w-full sm:w-auto bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition duration-200">
                            {{ __('general.save_positions') }}
                        </button>
                    </div>
                    @endif

                    @if($group->description)
                    <p class="text-gray-600 dark:text-gray-400 mb-6">{{ $group->description }}</p>
                    @endif

                     @if($isAuthenticated && $group->isContributionStarted())
                    <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-blue-900 dark:text-blue-100 mb-3">{{ __('general.contribution_status') }}</h4>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                                <div class="text-sm text-blue-600 dark:text-blue-400">{{ __('general.current_turn') }}</div>
                                <div class="font-semibold text-blue-900 dark:text-blue-100">
                                    {{ $group->currentTurnUser->name ?? 'N/A' }}
                                </div>
                            </div>
                            <div>
                                <div class="text-sm text-blue-600 dark:text-blue-400">{{ __('general.next_contribution_date') }}</div>
                                <div class="font-semibold text-blue-900 dark:text-blue-100">
                                    {{ $group->getNextContributionDate()?->format('M d, Y') ?? 'N/A' }}
                                </div>
                            </div>
                            <div>
                                <div class="text-sm text-blue-600 dark:text-blue-400">{{ __('general.current_cycle') }}</div>
                                <div class="font-semibold text-blue-900 dark:text-blue-100">
                                    {{ $group->current_cycle }} / {{ $group->current_members }}
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Payment Options Section -->
                    @if($group->currentTurnUser)
                    <div class="bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 border border-green-200 dark:border-green-800 rounded-lg p-6 mb-6">
                        <h4 class="text-xl font-semibold text-green-900 dark:text-green-100 mb-4 text-center">ðŸ’³ Payment Options</h4>
                        <p class="text-sm text-green-700 dark:text-green-300 mb-6 text-center">Choose your preferred payment method to contribute â‚¦{{ number_format($group->contribution_amount, 2) }}</p>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- ALATPay Card Payment -->
                            <div class="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700 shadow-sm">
                                <div class="flex items-center mb-4">
                                    <div class="w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center mr-4">
                                        <svg class="w-6 h-6 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <h5 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Card Payment</h5>
                                        <p class="text-sm text-gray-600 dark:text-gray-400">Pay instantly with your debit/credit card</p>
                                    </div>
                                </div>
                                <form action="{{ route('payments.card.initialize') }}" method="POST">
                                    @csrf
                                    <input type="hidden" name="group_id" value="{{ $group->uuid }}">
                                    <input type="hidden" name="amount" value="{{ $group->contribution_amount }}">
                                    <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-4 rounded-lg transition duration-200 flex items-center justify-center">
                                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                                        </svg>
                                        Pay with Card
                                    </button>
                                </form>
                            </div>

                            <!-- ALATPay Bank Transfer -->
                            <div class="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700 shadow-sm">
                                <div class="flex items-center mb-4">
                                    <div class="w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-lg flex items-center justify-center mr-4">
                                        <svg class="w-6 h-6 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 14v3m4-3v3m4-3v3M3 21h18M3 10h18M3 7l9-4 9 4M4 10h16v11H4V10z"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <h5 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Bank Transfer</h5>
                                        <p class="text-sm text-gray-600 dark:text-gray-400">Get virtual account for bank transfer</p>
                                    </div>
                                </div>
                                <form action="{{ route('payments.bank.generate') }}" method="POST">
                                    @csrf
                                    <input type="hidden" name="group_id" value="{{ $group->uuid }}">
                                    <input type="hidden" name="amount" value="{{ $group->contribution_amount }}">
                                    <button type="submit" class="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-4 rounded-lg transition duration-200 flex items-center justify-center">
                                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                        </svg>
                                        Generate Account
                                    </button>
                                </form>
                            </div>
                        </div>

                        <!-- Manual Bank Transfer Option -->
                        @if($group->currentTurnUser->hasBankDetails())
                        <div class="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
                            <div class="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700 shadow-sm">
                                <div class="flex items-center mb-4">
                                    <div class="w-12 h-12 bg-yellow-100 dark:bg-yellow-900/30 rounded-lg flex items-center justify-center mr-4">
                                        <svg class="w-6 h-6 text-yellow-600 dark:text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <h5 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Manual Bank Transfer</h5>
                                        <p class="text-sm text-gray-600 dark:text-gray-400">Transfer directly to recipient's bank account</p>
                                    </div>
                                </div>
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                                    <div>
                                        <div class="text-sm text-gray-600 dark:text-gray-400">Account Name</div>
                                        <div class="font-semibold text-gray-900 dark:text-gray-100">
                                            {{ $group->currentTurnUser->account_name }}
                                        </div>
                                    </div>
                                    <div>
                                        <div class="text-sm text-gray-600 dark:text-gray-400">Account Number</div>
                                        <div class="font-semibold text-gray-900 dark:text-gray-100">
                                            {{ $group->currentTurnUser->account_number }}
                                        </div>
                                    </div>
                                    <div>
                                        <div class="text-sm text-gray-600 dark:text-gray-400">Bank Name</div>
                                        <div class="font-semibold text-gray-900 dark:text-gray-100">
                                            {{ $group->currentTurnUser->bank_name }}
                                        </div>
                                    </div>
                                </div>
                                <p class="text-xs text-gray-500 dark:text-gray-400 italic">Note: Manual transfers require manual verification and may take longer to process.</p>
                            </div>
                        </div>
                        @endif
                    </div>
                    @endif
                    @endif

                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                        <div class="text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <div class="text-2xl font-bold text-gray-900 dark:text-gray-100">â‚¦{{ number_format($group->contribution_amount, 2) }}</div>
                            <div class="text-sm text-gray-600 dark:text-gray-400">{{ __('general.contribution_amount') }}</div>
                        </div>
                        <div class="text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <div class="text-2xl font-bold text-gray-900 dark:text-gray-100">{{ ucfirst($group->frequency) }}</div>
                            <div class="text-sm text-gray-600 dark:text-gray-400">{{ __('general.frequency') }}</div>
                        </div>
                        <div class="text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <div class="text-2xl font-bold text-gray-900 dark:text-gray-100">{{ $group->current_members }}/{{ $group->max_members }}</div>
                            <div class="text-sm text-gray-600 dark:text-gray-400">{{ __('general.members') }}</div>
                        </div>
                        <div class="text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <div class="text-2xl font-bold text-gray-900 dark:text-gray-100">{{ $group->start_date->format('M d, Y') }}</div>
                            <div class="text-sm text-gray-600 dark:text-gray-400">{{ __('general.start_date') }}</div>
                        </div>
                    </div>

                    <!-- Share Group (Compact Version) -->
                    <div class="mt-6 border-t border-gray-200 dark:border-gray-700 pt-4">
                        <div class="flex flex-col sm:flex-row items-center justify-between gap-4">
                            <div class="text-sm font-medium text-gray-700 dark:text-gray-300">
                                {{ __('general.share_group') }}:
                            </div>

                            <!-- Link Display with Copy Button -->
                            <div class="flex-1 flex items-center w-full sm:w-auto">
                                <div class="relative flex-1">
                                    <input type="text"
                                        value="{{ route('groups.show', $group) }}"
                                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-l-md bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-gray-100 text-sm"
                                        readonly>
                                </div>
                                <button onclick="copyToClipboard('{{ route('groups.show', $group) }}'); this.querySelector('.tooltip').classList.remove('hidden'); setTimeout(() => this.querySelector('.tooltip').classList.add('hidden'), 2000)"
                                    class="relative px-3 py-2 bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-200 rounded-r-md hover:bg-gray-300 dark:hover:bg-gray-500 transition">
                                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z"></path>
                                        <path d="M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z"></path>
                                    </svg>
                                    <span class="tooltip hidden absolute -top-8 right-0 bg-gray-800 text-white text-xs px-2 py-1 rounded whitespace-nowrap">Copied!</span>
                                </button>
                            </div>

                            <!-- Social Share Icons -->
                            <div class="flex space-x-2">
                                <a href="https://wa.me/?text={{ urlencode('Join our contribution group: ' . $group->name . ' - ' . route('groups.show', $group)) }}"
                                    target="_blank"
                                    class="p-2 bg-green-500 text-white rounded-full hover:bg-green-600 transition">
                                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z" />
                                    </svg>
                                </a>

                                <a href="https://www.facebook.com/sharer/sharer.php?u={{ urlencode(route('groups.show', $group)) }}"
                                    target="_blank"
                                    class="p-2 bg-blue-600 text-white rounded-full hover:bg-blue-700 transition">
                                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z" />
                                    </svg>
                                </a>

                                <a href="https://twitter.com/intent/tweet?text={{ urlencode('Join our contribution group: ' . $group->name) }}&url={{ urlencode(route('groups.show', $group)) }}"
                                    target="_blank"
                                    class="p-2 bg-black text-white rounded-full hover:bg-gray-800 transition">
                                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z" />
                                    </svg>
                                </a>

                                <a href="mailto:?subject={{ urlencode('Join our contribution group: ' . $group->name) }}&body={{ urlencode('Hello! I would like to invite you to join our contribution group: ' . $group->name . '. Click the link to view details and join: ' . route('groups.show', $group)) }}"
                                    class="p-2 bg-gray-600 text-white rounded-full hover:bg-gray-700 transition">
                                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z" />
                                    </svg>
                                </a>
                            </div>
                        </div>
                    </div>

                    @if($canJoin)
                    <div class="mt-6 flex justify-center" x-data="{ groupId: {{ $group->id }} }">
                        <form method="POST" action="{{ route('groups.join', $group) }}" id="join-group-{{ $group->id }}">
                            @csrf
                            <button
                                type="button"
                                class="inline-flex items-center px-8 py-3 bg-gray-800 dark:bg-gray-200 border border-transparent rounded-md font-semibold text-xs text-white dark:text-gray-800 uppercase tracking-widest hover:bg-gray-700 dark:hover:bg-white focus:bg-gray-700 dark:focus:bg-white active:bg-gray-900 dark:active:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition ease-in-out duration-150"
                                @click="$dispatch('open-modal', 'join-group-' + groupId)">
                                {{ __('general.join_this_group') }}
                            </button>
                        </form>
                    </div>
                    @elseif($userIsMember)
                    <div class="mt-6 flex justify-center space-x-4">
                        <span class="inline-flex items-center px-4 py-2 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 rounded-md text-sm font-medium">
                            âœ“ {{ __('general.you_are_member') }}
                        </span>
                        @if($group->created_by !== auth()->user()->uuid && $group->current_members > 1)
                        <div x-data="{ groupId: {{ $group->id }} }">
                            <form method="POST" action="{{ route('groups.leave', $group) }}" id="leave-group-{{ $group->id }}">
                                @csrf
                                @method('DELETE')
                                <button
                                    type="button"
                                    class="inline-flex items-center px-4 py-2 bg-red-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-red-500 active:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition ease-in-out duration-150"
                                    @click="$dispatch('open-modal', 'leave-group-{{ $group->id }}')">
                                    {{ __('general.leave_group') }}
                                </button>
                            </form>
                        </div>
                        @endif
                    </div>
                    @endif
                </div>
            </div>

            <!-- Members List -->
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6">
                    <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">{{ __('general.group_members') }}</h3>

                    @if($group->members->count() > 0)
                    <div class="space-y-3">
                        @foreach($group->members as $member)
                        <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <div class="flex items-center space-x-3">
                                <div class="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-semibold">
                                    {{ substr($member->user->name, 0, 1) }}
                                </div>
                                <div>
                                    <div class="font-medium text-gray-900 dark:text-gray-100">
                                        {{ $member->user->name }}
                                        @if($member->user->uuid === $group->created_by)
                                        <span class="ml-2 px-2 py-1 text-xs bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 rounded">
                                            {{ __('general.creator') }}
                                        </span>
                                        @endif
                                    </div>
                                    <div class="text-sm text-gray-600 dark:text-gray-400">
                                        {{ __('general.joined') }} {{ $member->joined_at->format('M d, Y') }}
                                    </div>
                                </div>
                            </div>
                            @if($member->payout_position)
                            <div class="text-sm text-gray-600 dark:text-gray-400">
                                {{ __('general.position') }} #{{ $member->payout_position }}
                            </div>
                            @endif
                        </div>
                        @endforeach
                    </div>
                    @else
                    <p class="text-gray-600 dark:text-gray-400 text-center py-4">
                        {{ __('general.no_members_yet') }}
                    </p>
                    @endif
                </div>
            </div>
        </div>
    </div>

    <script>
        function copyToClipboard(text) {
            const textarea = document.createElement('textarea');
            textarea.value = text;
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);
        }
    </script>

    @if($isAuthenticated)
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const memberPositions = document.getElementById('member-positions');
            const saveButton = document.getElementById('save-positions');

            if (memberPositions && saveButton) {
                // Make the list sortable
                new Sortable(memberPositions, {
                    animation: 150,
                    ghostClass: 'opacity-50',
                    onEnd: function(evt) {
                        updatePositionNumbers();
                    }
                });

                function updatePositionNumbers() {
                    const items = memberPositions.children;
                    for (let i = 0; i < items.length; i++) {
                        const positionBadge = items[i].querySelector('.w-8.h-8');
                        const positionText = items[i].querySelector('.text-sm.text-gray-500');
                        positionBadge.textContent = i + 1;
                        positionText.textContent = `Position #${i + 1}`;
                        items[i].setAttribute('data-position', i + 1);
                    }
                }

                saveButton.addEventListener('click', function() {
                    const positions = [];
                    const items = memberPositions.children;

                    for (let i = 0; i < items.length; i++) {
                        positions.push({
                            member_uuid: items[i].getAttribute('data-member-uuid'),
                            position: i + 1
                        });
                    }

                    // Save positions via AJAX
                    positions.forEach(item => {
                        fetch(`{{ route('groups.update-member-position', $group->uuid) }}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                            },
                            body: JSON.stringify(item)
                        });
                    });

                    // Show success message
                    alert("{{ __('general.member_position_updated ') }}");
                });
            }
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Spin Wheel Functionality
            const spinWheel = document.getElementById('spin-wheel');
            const spinBtn = document.getElementById('spin-btn');
            const spinResult = document.getElementById('spin-result');
            const resultText = document.getElementById('result-text');
            
            if (spinWheel && spinBtn) {
                // Group members data
                const members = @json($group->members->map(function($member) {
                    return [
                        'name' => $member->user->name,
                        'uuid' => $member->user_uuid
                    ];
                }));
                
                const memberCount = members.length;
                const segmentAngle = 360 / memberCount;
                
                // Generate wheel segments
                function createWheelSegments() {
                    const colors = [
                        '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',
                        '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9',
                        '#F8C471', '#82E0AA', '#F1948A', '#85C1E9', '#D7BDE2'
                    ];
                    
                    for (let i = 0; i < memberCount; i++) {
                        const segment = document.createElement('div');
                        segment.className = 'absolute w-full h-full';
                        segment.style.clipPath = `polygon(50% 50%, 50% 0%, ${50 + 50 * Math.cos((segmentAngle * (i + 1) - 90) * Math.PI / 180)}% ${50 + 50 * Math.sin((segmentAngle * (i + 1) - 90) * Math.PI / 180)}%, ${50 + 50 * Math.cos((segmentAngle * i - 90) * Math.PI / 180)}% ${50 + 50 * Math.sin((segmentAngle * i - 90) * Math.PI / 180)}%)`;
                        segment.style.backgroundColor = colors[i % colors.length];
                        
                        // Add member name
                        const nameDiv = document.createElement('div');
                        nameDiv.className = 'absolute text-white font-bold text-xs sm:text-sm';
                        nameDiv.style.top = '30%';
                        nameDiv.style.left = '60%';
                        nameDiv.style.transform = `rotate(${segmentAngle * i + segmentAngle / 2}deg)`;
                        nameDiv.style.transformOrigin = '0 100%';
                        nameDiv.textContent = members[i].name.split(' ')[0]; // First name only
                        
                        segment.appendChild(nameDiv);
                        spinWheel.appendChild(segment);
                    }
                }
                
                createWheelSegments();
                
                // Spin functionality
                let isSpinning = false;
                
                spinBtn.addEventListener('click', function() {
                    if (isSpinning) return;
                    
                    isSpinning = true;
                    spinBtn.disabled = true;
                    spinBtn.textContent = 'ðŸŽ² {{ __('general.spinning') }}...';
                    
                    // Random spin (multiple rotations + random final position)
                    const minSpins = 5;
                    const maxSpins = 8;
                    const spins = Math.random() * (maxSpins - minSpins) + minSpins;
                    const finalAngle = Math.random() * 360;
                    const totalRotation = spins * 360 + finalAngle;
                    
                    // Apply rotation
                    spinWheel.style.transform = `rotate(${totalRotation}deg)`;
                    
                    // Calculate winner after spin completes
                    setTimeout(() => {
                        // Normalize the final angle (0-360)
                        const normalizedAngle = (360 - (finalAngle % 360)) % 360;
                        const winnerIndex = Math.floor(normalizedAngle / segmentAngle);
                        const winner = members[winnerIndex];
                        
                        // Show result
                        resultText.innerHTML = `<strong>${winner.name}</strong> {{ __('general.gets_first_turn') }}<br><small>{{ __('general.turn_position_assigned', ['position' => 1]) }}</small>`;
                        spinResult.classList.remove('hidden');
                        
                        // Reset button
                        isSpinning = false;
                        spinBtn.disabled = false;
                        spinBtn.textContent = 'ðŸŽ² {{ __('general.spin_again') }}';
                        
                    }, 4000); // Match the CSS transition duration
                });
            }
        });
    </script>


    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Spin Wheel Functionality
            const spinWheel = document.getElementById('spin-wheel');
            const spinBtn = document.getElementById('spin-btn');
            const spinResult = document.getElementById('spin-result');
            const resultText = document.getElementById('result-text');
            
            // Member wheel elements
            const memberSpinWheel = document.getElementById('member-spin-wheel');
            const memberSpinBtn = document.getElementById('member-spin-btn');
            const memberSpinResult = document.getElementById('member-spin-result');
            const memberResultText = document.getElementById('member-result-text');
            
            // Group members data
            const memberCount = {{ $group->current_members }};
            const segmentAngle = 360 / memberCount;
            
            // Generate wheel segments with numbers
            function createNumberedWheelSegments(wheelElement) {
                if (!wheelElement) return;
                
                const colors = [
                    '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',
                    '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9'
                ];
                
                wheelElement.innerHTML = '';
                
                for (let i = 1; i <= memberCount; i++) {
                    const segment = document.createElement('div');
                    segment.className = 'absolute w-full h-full';
                    segment.style.clipPath = `polygon(50% 50%, 50% 0%, ${50 + 50 * Math.cos((i * segmentAngle - 90) * Math.PI / 180)}% ${50 + 50 * Math.sin((i * segmentAngle - 90) * Math.PI / 180)}%)`;
                    segment.style.backgroundColor = colors[(i - 1) % colors.length];
                    segment.style.transform = `rotate(${(i - 1) * segmentAngle}deg)`;
                    
                    // Add number label
                    const label = document.createElement('div');
                    label.className = 'absolute text-white font-bold text-lg';
                    label.style.top = '25%';
                    label.style.left = '50%';
                    label.style.transform = 'translate(-50%, -50%)';
                    label.textContent = i;
                    segment.appendChild(label);
                    
                    wheelElement.appendChild(segment);
                }
            }
            
            // Create wheel segments for both wheels
            createNumberedWheelSegments(spinWheel);
            createNumberedWheelSegments(memberSpinWheel);
            
            // Spin functionality for creator (assigns positions)
            if (spinBtn) {
                spinBtn.addEventListener('click', function() {
                    if (spinBtn.disabled) return;
                    
                    spinBtn.disabled = true;
                    spinBtn.textContent = '{{ __('general.spinning') }}...';
                    
                    // Random rotation (multiple full rotations + random angle)
                    const randomRotation = 1440 + Math.random() * 1440; // 4-8 full rotations
                    spinWheel.style.transform = `rotate(${randomRotation}deg)`;
                    
                    setTimeout(() => {
                        // Calculate which segment the pointer landed on
                        const normalizedRotation = randomRotation % 360;
                        const segmentIndex = Math.floor(normalizedRotation / segmentAngle) + 1;
                        
                        resultText.textContent = `{{ __('general.positions_assigned_randomly') }}`;
                        spinResult.classList.remove('hidden');
                        
                        spinBtn.style.display = 'none';
                    }, 4000);
                });
            }
            
            // Spin functionality for members (reveals their position)
            if (memberSpinBtn) {
                memberSpinBtn.addEventListener('click', function() {
                    if (memberSpinBtn.disabled) return;
                    
                    memberSpinBtn.disabled = true;
                    memberSpinBtn.textContent = '{{ __('general.spinning') }}...';
                    
                    // Make API call to spin wheel
                    fetch('{{ route('groups.spin-wheel', $group->uuid) }}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Calculate rotation to land on user's position
                            const targetPosition = data.position;
                            const targetAngle = (targetPosition - 1) * segmentAngle;
                            const randomRotation = 1440 + targetAngle; // Multiple rotations + target angle
                            
                            memberSpinWheel.style.transform = `rotate(${randomRotation}deg)`;
                            
                            setTimeout(() => {
                                memberResultText.textContent = `{{ __('general.your_turn_position_is') }} #${data.position}!`;
                                memberSpinResult.classList.remove('hidden');
                                memberSpinBtn.style.display = 'none';
                            }, 4000);
                        } else {
                            alert(data.message);
                            memberSpinBtn.disabled = false;
                            memberSpinBtn.textContent = 'ðŸŽ² {{ __('general.discover_my_position') }}';
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('{{ __('general.error_occurred') }}');
                        memberSpinBtn.disabled = false;
                        memberSpinBtn.textContent = 'ðŸŽ² {{ __('general.discover_my_position') }}';
                    });
                });
            }
        });
    </script>

    <!-- Include SortableJS -->
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    @endif

@if($isAuthenticated)
</x-app-layout>
@else
</x-guest-layout>
@endif